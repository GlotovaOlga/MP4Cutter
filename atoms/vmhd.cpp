//////////////////////////////////////////////////////////////////////////////////////////
//---------------------------ПОДКЛЮЧЕНИЕ ЗАГОЛОВОЧНЫХ ФАЙЛОВ----------------------------//
//////////////////////////////////////////////////////////////////////////////////////////
#include "vmhd.h"

//////////////////////////////////////////////////////////////////////////////////////////
//---------------------------ОПРЕДЕЛЕНИЕ МЕТОДОВ----------------------------------------//
//////////////////////////////////////////////////////////////////////////////////////////

//**************************************************************************************//
//--------------------------------------------------------------------------------------//
//---------------------------КЛАСС АТОМА VMHD-------------------------------------------//
//--------------------------------------------------------------------------------------//
//**************************************************************************************//

//**************************************************************************************//
//------------конструктор---------------------------------------------------------------//
VMHD::VMHD() :Atom(VMHD_NAME, VMHD_DIG_NAME)
{

}

//**************************************************************************************//
//------------деконструктор-------------------------------------------------------------//
VMHD::~VMHD()
{

}

//**************************************************************************************//
//------------парсинг структуры атома---------------------------------------------------//
void VMHD::parse(StreamReader &stream, uint32_t &startPos)
{
	printAtomName(LV5);																	// вывод отступа и имени атома
	m_size = stream.readSizeAtom();														// чтение размера атома
	m_data.resize(m_size, 0);															// изменение массива данных VMHD
	stream.read(&(m_data[0]), m_size);													// чтение всех данных VMHD
	startPos += m_size;																	// изменение позиции на следующий атом
}

//**************************************************************************************//
//------------запись атома--------------------------------------------------------------//
void VMHD::writeAtom(StreamWriter &stream)
{
	stream.write(&(m_data[0]), m_size);													// запись всех данных VMHD
}
