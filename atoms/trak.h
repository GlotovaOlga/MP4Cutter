#ifndef TRAK_H
#define TRAK_H

//////////////////////////////////////////////////////////////////////////////////////////
//---------------------------ПОДКЛЮЧЕНИЕ ЗАГОЛОВОЧНЫХ ФАЙЛОВ----------------------------//
//////////////////////////////////////////////////////////////////////////////////////////
#include "atom.h"
#include "tkhd.h"
#include "mdia.h"
#include <map>
#include <memory>

//////////////////////////////////////////////////////////////////////////////////////////
//---------------------------ОПРЕДЕЛЕНИЕ КЛАССОВ----------------------------------------//
//////////////////////////////////////////////////////////////////////////////////////////

//**************************************************************************************//
//---------------------------класс атома TRAK-------------------------------------------//
class TRAK: public Atom
{
public:
	//----------------------------------------------------------------------------------//
	//----------------------------публичные методы--------------------------------------//
	//----------------------------------------------------------------------------------//
    TRAK();																				// конструктор
   ~TRAK();																				// деконструктор
    virtual void parse(StreamReader& stream, uint32_t& startPos);						// парсинг структуры атома 
    void setTrakType(TRAK_TYPE type = TRAK_TYPE::VIDEO);								// установка типа трека
    virtual void prepareData();															// обработка данных
    virtual void writeAtom(StreamWriter& stream);										// запись атома

protected:
	//----------------------------------------------------------------------------------//
	//----------------------------защищенные методы-------------------------------------//
	//----------------------------------------------------------------------------------//
    virtual void resizeAtom(uint32_t size, DIRECT_RESIZE direction);					// изменение размера атома

private:
	//----------------------------------------------------------------------------------//
	//----------------------------приватные атрибуты------------------------------------//
	//----------------------------------------------------------------------------------//
    std::unique_ptr<TKHD> m_tkhd;														// атом нижнего уровня TKHD
    std::unique_ptr<MDIA> m_mdia;														// атом нижнего уровня MDIA
    TRAK_TYPE m_type;																	// тип атома (видео или аудио)

};

#endif // TRAK_H
