//////////////////////////////////////////////////////////////////////////////////////////
//---------------------------ПОДКЛЮЧЕНИЕ ЗАГОЛОВОЧНЫХ ФАЙЛОВ----------------------------//
//////////////////////////////////////////////////////////////////////////////////////////
#include "trak.h"
#include "../interfaces/callbackinterface.h"

//////////////////////////////////////////////////////////////////////////////////////////
//---------------------------ОПРЕДЕЛЕНИЕ МЕТОДОВ----------------------------------------//
//////////////////////////////////////////////////////////////////////////////////////////

//**************************************************************************************//
//--------------------------------------------------------------------------------------//
//---------------------------КЛАСС АТОМА TRAK-------------------------------------------//
//--------------------------------------------------------------------------------------//
//**************************************************************************************//
using namespace std;																	// использование пространства имен STD

//**************************************************************************************//
//------------конструктор---------------------------------------------------------------//
TRAK::TRAK():Atom(TRAK_NAME, TRAK_DIG_NAME)
{
    m_tkhd = make_unique<TKHD>();														// создание атома TKHD 
    m_mdia = make_unique<MDIA>();														// создание атома MDIA
    m_mdia->setCallback(this);															// создание возврата в MDIA
    m_type = TRAK_TYPE::VIDEO;															// устанавливаем тип атома по умолчанию "ВИДЕО"
}

//**************************************************************************************//
//------------деконструктор-------------------------------------------------------------//
TRAK::~TRAK()
{

}

//**************************************************************************************//
//------------парсинг структуры атома---------------------------------------------------//
void TRAK::parse(StreamReader &stream, uint32_t &startPos)
{
    printAtomName(LV2);																	// вывод отступа и имени атома										
    uint32_t pos = startPos;															// установка текущей позиции 
    m_size = stream.readSizeAtom();														// чтение размера атома
    pos = startPos+OFFSET_TITLE;														// изменение позиции на следующий атома
    stream.setPos(pos);																	// установка позиции в поток чтения
    m_tkhd->parse(stream,pos);															// парсинг TKHD																	
    m_mdia->parse(stream,pos);															// парсинг MDIA
    setTrakType(m_mdia->getTrakType());													// установка типа трека (видео или аудио)
    startPos += m_size;																	// установка позиции для следующего трека (если он есть)
}

//**************************************************************************************//
//------------установка типа трека------------------------------------------------------//
void TRAK::setTrakType(TRAK_TYPE type)
{
    m_type = type;
}

//**************************************************************************************//
//------------обработка данных----------------------------------------------------------//
void TRAK::prepareData()
{
    m_tkhd->setNewDuration(m_singletonSettings.getNewDuration());						// установка новой длительности видео в TKHD
    m_mdia->prepareData();																// обработка MDIA
}

//**************************************************************************************//
//------------запись атома--------------------------------------------------------------//
void TRAK::writeAtom(StreamWriter &stream)
{
        stream.writeLitToBigEndian(m_size);												// запись размера в BigEndian
        stream.writeAtomName(TRAK_NAME);												// запись имени атома
        m_tkhd->writeAtom(stream);														// запись атома TKHD
        m_mdia->writeAtom(stream);														// запись атома MDIA
}

//**************************************************************************************//
//------------изменение размера атома---------------------------------------------------//
void TRAK::resizeAtom(uint32_t size, DIRECT_RESIZE direction)
{
    if(direction == DIRECT_RESIZE::INCREASED){											// если размер атома увеличился
        this->m_size +=size;															// увелечение размера атома
    }else{																				// если размер атома уменьшился
        this->m_size -=size;															// уменьшение размера атома
    }
    m_callback->resizeAtom(size,direction);												// вызов изменения атома выше уровнем
}
