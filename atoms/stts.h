#ifndef STTS_H
#define STTS_H

//////////////////////////////////////////////////////////////////////////////////////////
//---------------------------ПОДКЛЮЧЕНИЕ ЗАГОЛОВОЧНЫХ ФАЙЛОВ----------------------------//
//////////////////////////////////////////////////////////////////////////////////////////
#include "atom.h"
#include <vector>

//////////////////////////////////////////////////////////////////////////////////////////
//---------------------------ОПРЕДЕЛЕНИЕ КЛАССОВ----------------------------------------//
//////////////////////////////////////////////////////////////////////////////////////////

//**************************************************************************************//
//---------------------------класс атома STTS-------------------------------------------//
class STTS: public Atom
{
public:
	//----------------------------------------------------------------------------------//
	//----------------------------публичные методы--------------------------------------//
	//----------------------------------------------------------------------------------//
    STTS(TRAK_TYPE type);																// конструктор
    ~STTS();																			// деконструктор
    virtual void parse(StreamReader& stream, uint32_t& startPos);						// парсинг структуры атома
    void prepareData();																	// обработка данных
    virtual void writeAtom(StreamWriter& stream);										// запись атома
protected:
	//----------------------------------------------------------------------------------//
	//----------------------------защищенные методы-------------------------------------//
	//----------------------------------------------------------------------------------//
    virtual void resizeAtom(uint32_t size, DIRECT_RESIZE direction);					// изменение размера атома

private:
	//----------------------------------------------------------------------------------//
	//----------------------------приватные атрибуты------------------------------------//
	//----------------------------------------------------------------------------------//
    uint32_t m_verFlag{0};																// Version и Flags, просто копируются
    uint32_t m_amount{0};																// кол-во данных STTS
    std::vector<SttsData> m_data;														// массив данных STTS

    TRAK_TYPE m_trakType{TRAK_TYPE::VIDEO};												// тип трека
};

#endif // STTS_H
